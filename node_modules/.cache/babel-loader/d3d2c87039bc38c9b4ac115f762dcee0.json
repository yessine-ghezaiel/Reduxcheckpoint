{"ast":null,"code":"import { ADD_INPUT, UPDATE_TODO, DELETE_TODO, CHECK_TODO } from \"../actions/todoTypes\";\nconst initState = {\n  todo: []\n};\n\nconst todoReducer = (state = initState, {\n  type,\n  payload\n}) => {\n  //     switch(type){\n  //         case ADD_TODO:\n  //             return {\n  //                 ...state,\n  //                 todoList:[...state.todoList,payload]\n  //             }\n  //         // case DELETE_TODO:\n  //         //     return {\n  //         //         todolist:{...state},\n  //         //         todoList:todoList.filter(todoList.id !== payload)\n  //         //     }\n  //         default:\n  //             return state\n  //         }\n  // }\n  // export default todoReducer\n  let newTask;\n\n  switch (type) {\n    case ADD_INPUT:\n      return state = [...state, payload];\n\n    case DELETE_TODO:\n      newTask = [...state];\n      newTask = newTask.filter(todo => todo.id !== payload);\n      return newTask;\n\n    case CHECK_TODO:\n      newTask = [...state];\n      newTask = newTask.map(todo => todo.id === payload ? { ...todo,\n        isDone: !todo.isDone\n      } : todo);\n      return newTask;\n\n    case UPDATE_TODO:\n      newTask = [...state];\n      let index = -1;\n\n      for (let i = 0; i < newTask.length; i++) {\n        index++;\n\n        if (newTask[i].id === payload.id) {\n          break;\n        }\n      }\n\n      if (index !== -1) {\n        newTask[index] = payload;\n        return newTask;\n      }\n\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;","map":{"version":3,"sources":["C:/Users/yessine/Desktop/GoMyCode/reduxcheckpoint/src/Redux/reducers/todoReducer.js"],"names":["ADD_INPUT","UPDATE_TODO","DELETE_TODO","CHECK_TODO","initState","todo","todoReducer","state","type","payload","newTask","filter","id","map","isDone","index","i","length"],"mappings":"AAAA,SAAUA,SAAV,EAAqBC,WAArB,EAAkCC,WAAlC,EAA+CC,UAA/C,QAAiE,sBAAjE;AAEA,MAAMC,SAAS,GAAC;AACZC,EAAAA,IAAI,EAAC;AADO,CAAhB;;AAIA,MAAMC,WAAW,GAAC,CAACC,KAAK,GAACH,SAAP,EAAiB;AAACI,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAjB,KAAkC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKI,MAAIC,OAAJ;;AACA,UAAQF,IAAR;AACA,SAAKR,SAAL;AACI,aAAQO,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAWE,OAAX,CAAhB;;AACJ,SAAKP,WAAL;AACIQ,MAAAA,OAAO,GAAG,CAAC,GAAGH,KAAJ,CAAV;AACAG,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAgBN,IAAD,IAAUA,IAAI,CAACO,EAAL,KAAYH,OAArC,CAAV;AACA,aAAOC,OAAP;;AACJ,SAAKP,UAAL;AACIO,MAAAA,OAAO,GAAG,CAAC,GAAGH,KAAJ,CAAV;AACAG,MAAAA,OAAO,GAAGA,OAAO,CAACG,GAAR,CAAaR,IAAD,IACtBA,IAAI,CAACO,EAAL,KAAYH,OAAZ,GAAsB,EAAE,GAAGJ,IAAL;AAAWS,QAAAA,MAAM,EAAE,CAACT,IAAI,CAACS;AAAzB,OAAtB,GAA0DT,IADhD,CAAV;AAGA,aAAOK,OAAP;;AACJ,SAAKT,WAAL;AACIS,MAAAA,OAAO,GAAG,CAAC,GAAGH,KAAJ,CAAV;AACA,UAAIQ,KAAK,GAAG,CAAC,CAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACzCD,QAAAA,KAAK;;AACL,YAAIL,OAAO,CAACM,CAAD,CAAP,CAAWJ,EAAX,KAAkBH,OAAO,CAACG,EAA9B,EAAkC;AAC9B;AACH;AACA;;AACD,UAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AAClBL,QAAAA,OAAO,CAACK,KAAD,CAAP,GAAiBN,OAAjB;AACA,eAAOC,OAAP;AACC;;AACD;;AACJ;AACI,aAAOH,KAAP;AA5BJ;AA8BC,CAtDL;;AAuDA,eAAeD,WAAf","sourcesContent":["import  { ADD_INPUT, UPDATE_TODO, DELETE_TODO, CHECK_TODO } from \"../actions/todoTypes\"\r\n\r\nconst initState={\r\n    todo:[],\r\n}\r\n\r\nconst todoReducer=(state=initState,{type,payload})=>{\r\n//     switch(type){\r\n//         case ADD_TODO:\r\n//             return {\r\n//                 ...state,\r\n//                 todoList:[...state.todoList,payload]\r\n//             }\r\n//         // case DELETE_TODO:\r\n//         //     return {\r\n//         //         todolist:{...state},\r\n//         //         todoList:todoList.filter(todoList.id !== payload)\r\n//         //     }\r\n    \r\n//         default:\r\n//             return state\r\n//         }\r\n\r\n// }\r\n// export default todoReducer\r\n\r\n\r\n\r\n\r\n    let newTask;\r\n    switch (type) {\r\n    case ADD_INPUT:\r\n        return (state = [...state, payload]);\r\n    case DELETE_TODO:\r\n        newTask = [...state];\r\n        newTask = newTask.filter((todo) => todo.id !== payload);\r\n        return newTask;\r\n    case CHECK_TODO:\r\n        newTask = [...state];\r\n        newTask = newTask.map((todo) =>\r\n        todo.id === payload ? { ...todo, isDone: !todo.isDone } : todo\r\n        );\r\n        return newTask;\r\n    case UPDATE_TODO:\r\n        newTask = [...state];\r\n        let index = -1;\r\n        for (let i = 0; i < newTask.length; i++) {\r\n        index++;\r\n        if (newTask[i].id === payload.id) {\r\n            break;\r\n        }\r\n        }\r\n        if (index !== -1) {\r\n        newTask[index] = payload;\r\n        return newTask;\r\n        }\r\n        break;\r\n    default:\r\n        return state;\r\n    }\r\n    };\r\nexport default todoReducer;\r\n"]},"metadata":{},"sourceType":"module"}